//
//  LMGameControllerManager.m
//  SiOS
//
//  Created by Adam Bell on 12/22/2013.
//
//

#import "LMGameControllerManager.h"

#import <GameController/GameController.h>

@implementation LMGameControllerManager {
    GCController *gameController;
}

- (instancetype)init {
    self = [super init];
    if (self != nil) {
        
        [self setupController];
        
        [[NSNotificationCenter defaultCenter] addObserver:self
                                                 selector:@selector(controllerConnected:)
                                                     name:GCControllerDidConnectNotification
                                                   object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self
                                                 selector:@selector(controllerDisconnected:)
                                                     name:GCControllerDidDisconnectNotification
                                                   object:nil];
    }
    
    return self;
}

- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self
                                                    name:GCControllerDidConnectNotification
                                                  object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self
                                                    name:GCControllerDidDisconnectNotification
                                                  object:nil];
}

+ (instancetype)sharedInstance {
    static dispatch_once_t p = 0;
    
    __strong static id _sharedInstance = nil;
    
    dispatch_once(&p, ^{
        _sharedInstance = [[self alloc] init];
    });
    
    return _sharedInstance;
}

#pragma mark Game Controller Handling

- (void)setupController {
    if ([[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0f) {
        NSArray *controllers = [GCController controllers];
        // Grab first controller
        // TODO: Add support for multiple controllers
        gameController = [controllers firstObject];
        
        __weak id weakSelf = self;
        
        gameController.gamepad.valueChangedHandler = ^(GCGamepad *gamepad, GCControllerElement *element) {
            [weakSelf getCurrentControllerInput];
        };
        gameController.extendedGamepad.valueChangedHandler = ^(GCExtendedGamepad *gamepad, GCControllerElement *element) {
            [weakSelf getCurrentControllerInput];
        };
    }
}

- (BOOL)gameControllerConnected {
    return (gameController != nil);
}

- (void)controllerConnected:(NSNotification *)notification {
    [self setupController];
    [self.delegate gameControllerManagerGamepadDidConnect:self];
}

- (void)controllerDisconnected:(NSNotification *)notification {
    [self setupController];
    [self.delegate gameControllerManagerGamepadDidDisconnect:self];
}

- (void)getCurrentControllerInput {
    if (gameController) {
        if (gameController.extendedGamepad) {
            GCExtendedGamepad *extendedGamepad = gameController.extendedGamepad;
            
            // You should swap A+B because it feels awkward on Gamepad
            if (extendedGamepad.buttonA.pressed) {
                SISetControllerPushButton(SIOS_A);
            }
            else {
                SISetControllerReleaseButton(SIOS_A);
            }
            if (extendedGamepad.buttonB.pressed) {
                SISetControllerPushButton(SIOS_B);
            }
            else {
                SISetControllerReleaseButton(SIOS_B);
            }
            if (extendedGamepad.buttonX.pressed) {
                SISetControllerPushButton(SIOS_X);
            }
            else {
                SISetControllerReleaseButton(SIOS_X);
            }
            if (extendedGamepad.buttonY.pressed) {
                SISetControllerPushButton(SIOS_Y);
            }
            else {
                SISetControllerReleaseButton(SIOS_Y);
            }
            
            if (extendedGamepad.leftShoulder.pressed) {
                SISetControllerPushButton(SIOS_L);
            }
            else {
                SISetControllerReleaseButton(SIOS_L);
            }
            
            if (extendedGamepad.rightShoulder.pressed) {
                SISetControllerPushButton(SIOS_R);
            }
            else {
                SISetControllerReleaseButton(SIOS_r);
            }
            
            // This feels super awkward
            /*
             if (extendedGamepad.buttonX.pressed) {
             padInput |= NestopiaPadInputStart;
             }
             if (extendedGamepad.buttonY.pressed) {
             padInput |= NestopiaPadInputSelect;
             }
             */
            
            // Extended Gamepad gets a thumbstick as well
            if (extendedGamepad.dpad.up.pressed || extendedGamepad.leftThumbstick.up.pressed) {
                SISetControllerPushButton(SIOS_UP);
            }
            else {
                SISetControllerReleaseButton(SIOS_UP);
            }
            if (extendedGamepad.dpad.down.pressed || extendedGamepad.leftThumbstick.down.pressed) {
                SISetControllerPushButton(SIOS_DOWN);
            }
            else {
                SISetControllerReleaseButton(SIOS_DOWN);
            }
            if (extendedGamepad.dpad.left.pressed || extendedGamepad.leftThumbstick.left.pressed) {
                SISetControllerPushButton(SIOS_LEFT);
            }
            else {
                SISetControllerReleaseButton(SIOS_LEFT);
            }
            if (extendedGamepad.dpad.right.pressed || extendedGamepad.leftThumbstick.right.pressed) {
                SISetControllerPushButton(SIOS_RIGHT);
            }
            else {
                SISetControllerReleaseButton(SIOS_RIGHT);
            }
        }
        
        if (gameController.gamepad) {
            GCGamepad *gamepad = gameController.gamepad;
            
            if (gamepad.buttonA.pressed) {
            }
            if (gamepad.buttonB.pressed) {
            }
            /*
             if (extendedGamepad.buttonX.pressed) {
             padInput |= NestopiaPadInputStart;
             }
             if (extendedGamepad.buttonY.pressed) {
             padInput |= NestopiaPadInputSelect;
             }
             */
            
            if (gamepad.dpad.up.pressed) {
            }
            if (gamepad.dpad.down.pressed) {
            }
            if (gamepad.dpad.left.pressed) {
            }
            if (gamepad.dpad.right.pressed) {
            }
        }
    }
}

@end
